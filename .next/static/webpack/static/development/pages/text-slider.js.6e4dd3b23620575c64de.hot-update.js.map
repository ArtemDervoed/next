{"version":3,"file":"static/webpack/static/development/pages/text-slider.js.6e4dd3b23620575c64de.hot-update.js","sources":["webpack:///./components/SphereSlider/SphereSlider.js"],"sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    \n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n          time: { value: 1.0 }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n  \n    });\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    this.text = new THREE.Mesh( this.geometry, this.material );\n    this.text.position.z = -200;\n    this.scene.add( this.text );\n    \n    this.animate();\n  }\n\n  prepareTextTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    const ctx = canvas.getContext('2d');\n    ctx.font = '170px serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#ffffff'\n    ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n    return canvas;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;;;;AAzFA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AALA;AASA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAsBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AA/FA;AACA;;;;;A","sourceRoot":""}