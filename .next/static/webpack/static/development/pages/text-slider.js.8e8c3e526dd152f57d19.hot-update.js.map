{"version":3,"file":"static/webpack/static/development/pages/text-slider.js.8e8c3e526dd152f57d19.hot-update.js","sources":["webpack:///./components/SphereSlider/SphereSlider.js"],"sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n          uTime: { value: 1.0 }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    this.text = new THREE.Mesh( this.geometry, this.material );\n    this.prepareTextGeometry('ODDA');\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add( this.text );\n    \n    this.animate();\n  }\n\n  prepareTextGeometry = (text) => {\n    const group = new THREE.Group();\n    const glyphs = text.split('');\n    for (let i = 0; i < glyphs.length; i++) {\n      const shapes = this.font.generateShapes( glyphs[i], 100 );\n      const geometry = new THREE.ShapeBufferGeometry( shapes );\n      geometry.computeBoundingBox();\n      group.add(new THREE.Mesh(geometry, this.material));\n    };\n\n    console.log(group);\n    \n  }\n\n  animate = () => {\n    this.material.needsUpdate = true;\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;;;;AArEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAwBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AA3EA;AACA;;;;;A","sourceRoot":""}