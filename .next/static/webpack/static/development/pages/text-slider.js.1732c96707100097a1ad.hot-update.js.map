{"version":3,"file":"static/webpack/static/development/pages/text-slider.js.1732c96707100097a1ad.hot-update.js","sources":["webpack:///./components/SphereSlider/SphereSlider.js"],"sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    console.log(OrbitControls);\n    \n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = false\n\n    this.texture = this.prepareText('Awesome');\n    this.geometry = new THREE.PlaneGeometry( 5, 20, 32 );\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  prepareText = (text) => {\n    const bitmap = document.createElement('canvas');\n    const g = bitmap.getContext('2d');\n    bitmap.width = 100;\n    bitmap.height = 100;\n    g.font = 'Bold 20px Arial';\n\n    g.fillStyle = 'white';\n    g.fillText(text, 0, 20);\n    g.strokeStyle = 'black';\n    g.strokeText(text, 0, 20);\n\n    // canvas contents will be used for a texture\n    const texture = new THREE.Texture(bitmap) \n    texture.needsUpdate = true;\n\n    return texture;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;;;;AA7DA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;AA4BA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AAnEA;AACA;;;;;A","sourceRoot":""}