{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\n\nvar SphereSlider =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SphereSlider, _React$PureComponent);\n\n  function SphereSlider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SphereSlider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SphereSlider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"prepareText\", function (text) {\n      var bitmap = document.createElement('canvas');\n      var g = bitmap.getContext('2d');\n      bitmap.width = 100;\n      bitmap.height = 100;\n      g.font = 'Bold 20px Arial';\n      g.fillStyle = 'white';\n      g.fillText(text, 0, 20);\n      g.strokeStyle = 'black';\n      g.strokeText(text, 0, 20); // canvas contents will be used for a texture\n\n      var texture = new THREE.Texture(bitmap);\n      texture.needsUpdate = true;\n      return texture;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function () {\n      requestAnimationFrame(_this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    return _this;\n  }\n\n  _createClass(SphereSlider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      // this.cube = new THREE.Mesh( this.geometry, this.material );\n      // this.scene.add(this.cube);\n\n      this.camera.position.z = 5;\n      this.canvas.appendChild(this.renderer.domElement);\n      this.texture = this.prepareText('Awesome');\n      this.geometry = new THREE.PlaneGeometry(5, 20, 32);\n      this.material = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        side: THREE.DoubleSide,\n        map: this.texture\n      });\n      this.plane = new THREE.Mesh(this.geometry, this.material);\n      scene.add(this.plane);\n      this.animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        ref: function ref(node) {\n          _this2.canvas = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SphereSlider;\n}(React.PureComponent);\n\nexport { SphereSlider as default };","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","SphereSlider","text","bitmap","document","createElement","g","getContext","width","height","font","fillStyle","fillText","strokeStyle","strokeText","texture","Texture","needsUpdate","requestAnimationFrame","animate","renderer","render","scene","camera","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","canvas","appendChild","domElement","prepareText","geometry","PlaneGeometry","material","MeshBasicMaterial","color","side","DoubleSide","map","plane","Mesh","add","node","React","PureComponent"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;IAEqBC,Y;;;;;;;;;;;;;;;;;;kEA8BL,UAACC,IAAD,EAAU;AACtB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,CAAC,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AACAJ,MAAAA,MAAM,CAACK,KAAP,GAAe,GAAf;AACAL,MAAAA,MAAM,CAACM,MAAP,GAAgB,GAAhB;AACAH,MAAAA,CAAC,CAACI,IAAF,GAAS,iBAAT;AAEAJ,MAAAA,CAAC,CAACK,SAAF,GAAc,OAAd;AACAL,MAAAA,CAAC,CAACM,QAAF,CAAWV,IAAX,EAAiB,CAAjB,EAAoB,EAApB;AACAI,MAAAA,CAAC,CAACO,WAAF,GAAgB,OAAhB;AACAP,MAAAA,CAAC,CAACQ,UAAF,CAAaZ,IAAb,EAAmB,CAAnB,EAAsB,EAAtB,EAVsB,CAYtB;;AACA,UAAMa,OAAO,GAAG,IAAIf,KAAK,CAACgB,OAAV,CAAkBb,MAAlB,CAAhB;AACAY,MAAAA,OAAO,CAACE,WAAR,GAAsB,IAAtB;AAEA,aAAOF,OAAP;AACD,K;;8DAES,YAAM;AACdG,MAAAA,qBAAqB,CAAE,MAAKC,OAAP,CAArB,CADc,CAEd;AACF;;AACE,YAAKC,QAAL,CAAcC,MAAd,CAAsB,MAAKC,KAA3B,EAAkC,MAAKC,MAAvC;AACD,K;;;;;;;wCArDmB;AAClB,WAAKD,KAAL,GAAa,IAAItB,KAAK,CAACwB,KAAV,EAAb;AACA,WAAKD,MAAL,GAAc,IAAIvB,KAAK,CAACyB,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAd;AAEA,WAAKR,QAAL,GAAgB,IAAIpB,KAAK,CAAC6B,aAAV,EAAhB;AACA,WAAKT,QAAL,CAAcU,OAAd,CAAuBJ,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACE,WAAjD,EALkB,CAQlB;AACA;AACA;AACA;;AAEA,WAAKL,MAAL,CAAYQ,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB;AAEA,WAAKC,MAAL,CAAYC,WAAZ,CAAyB,KAAKd,QAAL,CAAce,UAAvC;AAEA,WAAKpB,OAAL,GAAe,KAAKqB,WAAL,CAAiB,SAAjB,CAAf;AACA,WAAKC,QAAL,GAAgB,IAAIrC,KAAK,CAACsC,aAAV,CAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,CAAhB;AACA,WAAKC,QAAL,GAAgB,IAAIvC,KAAK,CAACwC,iBAAV,CAA4B;AAC1CC,QAAAA,KAAK,EAAE,QADmC;AAE1CC,QAAAA,IAAI,EAAE1C,KAAK,CAAC2C,UAF8B;AAG1CC,QAAAA,GAAG,EAAE,KAAK7B;AAHgC,OAA5B,CAAhB;AAKA,WAAK8B,KAAL,GAAa,IAAI7C,KAAK,CAAC8C,IAAV,CAAgB,KAAKT,QAArB,EAA+B,KAAKE,QAApC,CAAb;AACAjB,MAAAA,KAAK,CAACyB,GAAN,CAAW,KAAKF,KAAhB;AACA,WAAK1B,OAAL;AACD;;;6BA4BQ;AAAA;;AACP,aACE;AAAK,QAAA,GAAG,EAAE,aAAC6B,IAAD,EAAU;AAAE,UAAA,MAAI,CAACf,MAAL,GAAce,IAAd;AAAmB,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EA5DuCC,KAAK,CAACC,a;;SAA3BjD,Y","sourcesContent":["import * as THREE from 'three';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.texture = this.prepareText('Awesome');\n    this.geometry = new THREE.PlaneGeometry( 5, 20, 32 );\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    scene.add( this.plane );\n    this.animate();\n  }\n\n  prepareText = (text) => {\n    const bitmap = document.createElement('canvas');\n    const g = bitmap.getContext('2d');\n    bitmap.width = 100;\n    bitmap.height = 100;\n    g.font = 'Bold 20px Arial';\n\n    g.fillStyle = 'white';\n    g.fillText(text, 0, 20);\n    g.strokeStyle = 'black';\n    g.strokeText(text, 0, 20);\n\n    // canvas contents will be used for a texture\n    const texture = new THREE.Texture(bitmap) \n    texture.needsUpdate = true;\n\n    return texture;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}