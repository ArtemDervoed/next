{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"prepareTextTexture\", () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.font = '48px serif';\n      ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n      this.canvas.appendChild(canvas);\n      return canvas;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.prepareTextTexture();\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5; // this.canvas.appendChild( this.renderer.domElement );\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.loader = new THREE.FontLoader();\n    this.loader.load('fonts/helvetiker_regular.typeface.json', font => {\n      console.log(font);\n    });\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture\n    });\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","SphereSlider","React","PureComponent","canvas","document","createElement","width","window","innerWidth","height","innerHeight","ctx","getContext","font","fillText","appendChild","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","prepareTextTexture","Scene","PerspectiveCamera","WebGLRenderer","setSize","position","z","controls","domElement","enableDamping","dampingFactor","enableZoom","loader","FontLoader","load","console","log","material","MeshBasicMaterial","color","side","DoubleSide","map","texture","plane","Mesh","geometry","add","node"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA,eAAe,MAAMC,YAAN,SAA2BC,KAAK,CAACC,aAAjC,CAA+C;AAAA;AAAA;;AAAA,gDAsCvC,MAAM;AACzB,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACG,KAAP,GAAeC,MAAM,CAACC,UAAtB;AACAL,MAAAA,MAAM,CAACM,MAAP,GAAgBF,MAAM,CAACG,WAAvB;AACA,YAAMC,GAAG,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAZ;AACAD,MAAAA,GAAG,CAACE,IAAJ,GAAW,YAAX;AACAF,MAAAA,GAAG,CAACG,QAAJ,CAAa,MAAb,EAAqBX,MAAM,CAACG,KAAP,GAAe,CAApC,EAAuCH,MAAM,CAACM,MAAP,GAAgB,CAAvD;AACA,WAAKN,MAAL,CAAYY,WAAZ,CAAwBZ,MAAxB;AACA,aAAOA,MAAP;AACD,KA/C2D;;AAAA,qCAiDlD,MAAM;AACda,MAAAA,qBAAqB,CAAE,KAAKC,OAAP,CAArB,CADc,CAEd;AACF;;AACE,WAAKC,QAAL,CAAcC,MAAd,CAAsB,KAAKC,KAA3B,EAAkC,KAAKC,MAAvC;AACD,KAtD2D;AAAA;;AAC5DC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,kBAAL;AACA,SAAKH,KAAL,GAAa,IAAItB,KAAK,CAAC0B,KAAV,EAAb;AACA,SAAKH,MAAL,GAAc,IAAIvB,KAAK,CAAC2B,iBAAV,CAA6B,EAA7B,EAAiClB,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACG,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAd;AAEA,SAAKQ,QAAL,GAAgB,IAAIpB,KAAK,CAAC4B,aAAV,EAAhB;AACA,SAAKR,QAAL,CAAcS,OAAd,CAAuBpB,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACG,WAAjD,EANkB,CAQlB;AACA;AACA;AACA;;AAEA,SAAKW,MAAL,CAAYO,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB,CAbkB,CAelB;;AAGA,SAAKC,QAAL,GAAgB,IAAI/B,aAAJ,CAAkB,KAAKsB,MAAvB,EAA+B,KAAKH,QAAL,CAAca,UAA7C,CAAhB;AACA,SAAKD,QAAL,CAAcE,aAAd,GAA8B,IAA9B;AACA,SAAKF,QAAL,CAAcG,aAAd,GAA8B,IAA9B;AACA,SAAKH,QAAL,CAAcI,UAAd,GAA2B,IAA3B;AAEA,SAAKC,MAAL,GAAc,IAAIrC,KAAK,CAACsC,UAAV,EAAd;AACA,SAAKD,MAAL,CAAYE,IAAZ,CAAiB,wCAAjB,EAA4DxB,IAAD,IAAU;AACnEyB,MAAAA,OAAO,CAACC,GAAR,CAAY1B,IAAZ;AACD,KAFD;AAGA,SAAK2B,QAAL,GAAgB,IAAI1C,KAAK,CAAC2C,iBAAV,CAA4B;AAC1CC,MAAAA,KAAK,EAAE,QADmC;AAE1CC,MAAAA,IAAI,EAAE7C,KAAK,CAAC8C,UAF8B;AAG1CC,MAAAA,GAAG,EAAE,KAAKC;AAHgC,KAA5B,CAAhB;AAKA,SAAKC,KAAL,GAAa,IAAIjD,KAAK,CAACkD,IAAV,CAAgB,KAAKC,QAArB,EAA+B,KAAKT,QAApC,CAAb;AACA,SAAKpB,KAAL,CAAW8B,GAAX,CAAe,KAAKH,KAApB;AACA,SAAK9B,OAAL;AACD;;AAoBDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,GAAG,EAAGgC,IAAD,IAAU;AAAE,aAAKhD,MAAL,GAAcgD,IAAd;AAAmB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA5D2D","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.prepareTextTexture();\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    // this.canvas.appendChild( this.renderer.domElement );\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n\n    this.loader = new THREE.FontLoader();\n    this.loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\n      console.log(font);\n    });\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  prepareTextTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const ctx = canvas.getContext('2d');\n    ctx.font = '48px serif';\n    ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n    this.canvas.appendChild(canvas);\n    return canvas;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}