{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"prepareTextTexture\", () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 100000;\n      canvas.height = 100000;\n      const ctx = canvas.getContext('2d');\n      ctx.font = '1024px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n      return canvas;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    console.log(this.texture); // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n\n    this.texture.minFilter = THREE.LinearFilter; // this.texture.anisotropy  = 1;\n\n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.geometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight);\n    this.material = new THREE.MeshBasicMaterial({\n      // color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture\n    });\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","SphereSlider","React","PureComponent","canvas","document","createElement","width","height","ctx","getContext","font","textAlign","textBaseline","fillStyle","fillText","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","texture","Texture","prepareTextTexture","console","log","minFilter","LinearFilter","needsUpdate","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","geometry","PlaneGeometry","material","MeshBasicMaterial","side","DoubleSide","map","plane","Mesh","add","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    console.log(this.texture);\n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n\n    this.geometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight)\n    this.material = new THREE.MeshBasicMaterial({\n      // color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  prepareTextTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 100000;\n    canvas.height = 100000;\n    const ctx = canvas.getContext('2d');\n    ctx.font = '1024px serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#ffffff'\n    ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n    return canvas;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}