{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl';\nimport textVertex from '../../glsl/vertex.glsl'; // import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    // this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter; // this.texture.anisotropy  = 1;\n\n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.color = 0xff0000;\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n        uTime: {\n          value: 1.0\n        }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide\n    });\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.font = new THREE.Font(TG);\n    const shapes = this.font.generateShapes('ODDA', 100);\n    this.geometry = new THREE.ShapeBufferGeometry(shapes);\n    this.geometry.computeBoundingBox();\n    this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n    this.yMid = -0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n    this.geometry.translate(this.xMid, this.yMid, 0); // make shape ( N.B. edge view not visible )\n\n    console.log(this.geometry);\n    this.text = new THREE.Mesh(this.geometry, this.material);\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add(this.text);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","TG","textFragment","textVertex","SphereSlider","React","PureComponent","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","texture","minFilter","LinearFilter","needsUpdate","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","canvas","appendChild","domElement","color","material","RawShaderMaterial","uniforms","uTime","value","vertexShader","fragmentShader","side","DoubleSide","matDark","LineBasicMaterial","matLite","MeshBasicMaterial","transparent","opacity","controls","enableDamping","dampingFactor","enableZoom","font","Font","shapes","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","yMid","y","translate","console","log","text","Mesh","add","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    // this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    \n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n          uTime: { value: 1.0 }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide\n  \n    });\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    this.text = new THREE.Mesh( this.geometry, this.material );\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add( this.text );\n    \n    this.animate();\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}