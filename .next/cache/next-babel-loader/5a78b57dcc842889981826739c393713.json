{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/Sphere/Sphere.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fragmentShader from './fragment.glsl';\nimport vertexShader from './vertex.glsl';\nimport * as THREE from 'three'; // import TRYGalien from './TRYGalien.woff2';\n\nexport default class Sphere extends React.PureComponent {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleMouseMove\", e => {\n      this.mouse.x = e.clientX / window.innerWidth * 2 - 1;\n      this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate);\n    });\n\n    this.mouse = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  componentDidMount() {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setClearColor('hsl(100, 10%, 10%)', 1);\n    this.camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 1000); // this.camera.position.set(2, -1.5, -1);\n\n    this.camera.lookAt(new THREE.Vector3());\n    this.scene = new THREE.Scene();\n    this.camera.position.z = 5;\n    this.renderer.setSize(this.width, this.height);\n    this.canvas.appendChild(this.renderer.domElement);\n    this.particles = new THREE.OctahedronGeometry(1, 5);\n    this.particles.vertices = this.particles.vertices.map(v => {\n      v.x += (Math.random() - 0.5) * 0.05;\n      v.y += (Math.random() - 0.5) * 0.05;\n      v.z += (Math.random() - 0.5) * 0.05;\n      return v;\n    });\n    this.shaderPoint = THREE.ShaderLib.points;\n    this.uniforms = _objectSpread({}, shaderPoint.uniforms, {\n      iTime: {\n        value: 0\n      },\n      pSize: {\n        value: 10\n      }\n    });\n    this.pMaterial = new THREE.ShaderMaterial({\n      uniforms,\n      transparent: true,\n      depthWrite: false,\n      blending: THREE.AdditiveBlending,\n      fragmentShader,\n      vertexShader\n    });\n    this.particleSystem = new THREE.Points(this.particles, this.pMaterial);\n    this.particleSystem.sortParticles = true;\n    scene.add(this.particleSystem);\n    window.addEventListener('mousemove', this.handleMouseMove);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/Sphere/Sphere.js"],"names":["fragmentShader","vertexShader","THREE","Sphere","React","PureComponent","constructor","e","mouse","x","clientX","window","innerWidth","y","clientY","innerHeight","renderer","render","scene","camera","requestAnimationFrame","animate","componentDidMount","width","height","WebGLRenderer","setClearColor","PerspectiveCamera","lookAt","Vector3","Scene","position","z","setSize","canvas","appendChild","domElement","particles","OctahedronGeometry","vertices","map","v","Math","random","shaderPoint","ShaderLib","points","uniforms","iTime","value","pSize","pMaterial","ShaderMaterial","transparent","depthWrite","blending","AdditiveBlending","particleSystem","Points","sortParticles","add","addEventListener","handleMouseMove","node"],"mappings":"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","sourcesContent":["import fragmentShader from './fragment.glsl'\nimport vertexShader from './vertex.glsl';\n\nimport * as THREE from 'three';\n\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class Sphere extends React.PureComponent {\n  constructor() {\n    super();\n    this.mouse = {\n      x: 0,\n      y: 0,\n    }\n  }\n  componentDidMount() {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n\n    this.renderer = new THREE.WebGLRenderer();\n\n    this.renderer.setClearColor('hsl(100, 10%, 10%)', 1);\n\n\n    this.camera = new THREE.PerspectiveCamera( 75, this.width / this.height, 0.1, 1000 );\n    // this.camera.position.set(2, -1.5, -1);\n\n    this.camera.lookAt(new THREE.Vector3());\n\n    this.scene = new THREE.Scene();\n\n    this.camera.position.z = 5;\n    this.renderer.setSize(this.width, this.height);\n    this.canvas.appendChild(this.renderer.domElement);\n\n    this.particles = new THREE.OctahedronGeometry(1, 5);\n    this.particles.vertices = this.particles.vertices.map(v => {\n        v.x += (Math.random() - 0.5) * 0.05;\n        v.y += (Math.random() - 0.5) * 0.05;\n        v.z += (Math.random() - 0.5) * 0.05;\n        return v;\n    });\n\n    this.shaderPoint = THREE.ShaderLib.points;\n    this.uniforms = {\n        ...shaderPoint.uniforms,\n        iTime: { value: 0 },\n        pSize: { value: 10 },\n    };\n\n    this.pMaterial = new THREE.ShaderMaterial({\n        uniforms,\n        transparent: true,\n        depthWrite: false,\n\n        blending: THREE.AdditiveBlending,\n\n        fragmentShader,\n        vertexShader,\n    });\n\n    this.particleSystem = new THREE.Points(this.particles, this.pMaterial);\n    this.particleSystem.sortParticles = true;\n\n    scene.add(this.particleSystem);\n\n    window.addEventListener('mousemove', this.handleMouseMove);\n    this.animate();\n  }\n\n  handleMouseMove = (e) => {\n    this.mouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t  this.mouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n  }\n\n  animate = () => {\n    this.renderer.render( this.scene, this.camera );\n    requestAnimationFrame( this.animate );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}