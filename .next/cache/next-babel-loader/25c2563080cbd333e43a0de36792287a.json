{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl';\nimport textVertex from '../../glsl/vertex.glsl'; // import TRYGalien from './TRYGalien.woff2';\n\nvar SphereSlider =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SphereSlider, _React$PureComponent);\n\n  function SphereSlider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SphereSlider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SphereSlider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"prepareTextTexture\", function () {\n      var canvas = document.createElement('canvas');\n      canvas.width = window.innerWidth * 2;\n      canvas.height = window.innerHeight * 2;\n      var ctx = canvas.getContext('2d');\n      ctx.font = '170px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n      return canvas;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function () {\n      requestAnimationFrame(_this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    return _this;\n  }\n\n  _createClass(SphereSlider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.texture = new THREE.Texture(this.prepareTextTexture()); // console.log(TRYGalien);\n      // console.log(require(textFragment, textVertex));\n      // this.texture.magFilter = THREE.NearestFilter;\n      // this.texture.minFilter = THREE.NearestFilter;\n      // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n\n      this.texture.minFilter = THREE.LinearFilter; // this.texture.anisotropy  = 1;\n\n      this.texture.needsUpdate = true;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      // this.cube = new THREE.Mesh( this.geometry, this.material );\n      // this.scene.add(this.cube);\n\n      this.camera.position.z = 5;\n      this.canvas.appendChild(this.renderer.domElement);\n      this.color = 0xff0000; // this.material = new THREE.RawShaderMaterial({\n      //   uniforms: {\n      //       uTime: { value: 1.0 }\n      //   },\n      //   vertexShader: textVertex,\n      //   fragmentShader: textFragment,\n      // });\n\n      this.matDark = new THREE.LineBasicMaterial({\n        color: this.color,\n        side: THREE.DoubleSide\n      });\n      this.matLite = new THREE.MeshBasicMaterial({\n        color: this.color,\n        transparent: true,\n        opacity: 0.4,\n        side: THREE.DoubleSide\n      });\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true;\n      this.controls.dampingFactor = 0.25;\n      this.controls.enableZoom = true;\n      this.font = new THREE.Font(TG);\n      var shapes = this.font.generateShapes('ODDA', 100);\n      this.geometry = new THREE.ShapeBufferGeometry(shapes);\n      this.geometry.computeBoundingBox();\n      this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n      this.yMid = -0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n      this.geometry.translate(this.xMid, this.yMid, 0); // make shape ( N.B. edge view not visible )\n\n      console.log(this.geometry);\n      this.text = new THREE.Mesh(this.geometry, this.material);\n      this.text.position.z = 0;\n      this.camera.position.z = 200;\n      this.scene.add(this.text);\n      this.animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        ref: function ref(node) {\n          _this2.canvas = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SphereSlider;\n}(React.PureComponent);\n\nexport { SphereSlider as default };","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","TG","textFragment","textVertex","SphereSlider","canvas","document","createElement","width","window","innerWidth","height","innerHeight","ctx","getContext","font","textAlign","textBaseline","fillStyle","fillText","requestAnimationFrame","animate","renderer","render","scene","camera","texture","Texture","prepareTextTexture","minFilter","LinearFilter","needsUpdate","Scene","PerspectiveCamera","WebGLRenderer","setSize","position","z","appendChild","domElement","color","matDark","LineBasicMaterial","side","DoubleSide","matLite","MeshBasicMaterial","transparent","opacity","controls","enableDamping","dampingFactor","enableZoom","Font","shapes","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","yMid","y","translate","console","log","text","Mesh","material","add","node","React","PureComponent"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    \n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    // this.material = new THREE.RawShaderMaterial({\n    //   uniforms: {\n    //       uTime: { value: 1.0 }\n    //   },\n    //   vertexShader: textVertex,\n    //   fragmentShader: textFragment,\n  \n    // });\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    this.text = new THREE.Mesh( this.geometry, this.material );\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add( this.text );\n    \n    this.animate();\n  }\n\n  prepareTextTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    const ctx = canvas.getContext('2d');\n    ctx.font = '170px serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#ffffff'\n    ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n    return canvas;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}