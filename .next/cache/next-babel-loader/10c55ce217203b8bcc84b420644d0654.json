{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl';\nimport textVertex from '../../glsl/vertex.glsl'; // import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"prepareTextGeometry\", text => {\n      const group = new THREE.Group();\n      const glyphs = text.split('');\n      let offset = 0;\n\n      for (let i = 0; i < glyphs.length; i++) {\n        const shapes = this.font.generateShapes(glyphs[i], 100);\n        const geometry = new THREE.ShapeBufferGeometry(shapes);\n        geometry.computeBoundingBox();\n        const xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x) + offset;\n        const yMid = -0.5 * (geometry.boundingBox.max.y - geometry.boundingBox.min.y);\n        offset += geometry.boundingBox.max.x - geometry.boundingBox.min.x; // console.log();\n\n        geometry.translate(xMid, yMid, 0);\n        group.add(new THREE.Mesh(geometry, this.material));\n      }\n\n      ; // group.computeBoundingBox();\n\n      console.log(group);\n      return group;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      this.material.needsUpdate = true;\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.color = 0xff0000;\n\n    var MSDFShader = require('three-bmfont-text/shaders/msdf');\n\n    this.material = new THREE.RawShaderMaterial(MSDFShader({\n      uniforms: {\n        uTime: {\n          value: 1.0\n        }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide,\n      transparent: true\n    })); // this.material = new THREE.RawShaderMaterial({\n    //   uniforms: {\n    //       uTime: { value: 1.0 }\n    //   },\n    //   vertexShader: textVertex,\n    //   fragmentShader: textFragment,\n    //   side: THREE.DoubleSide,\n    //   transparent: true,\n    // });\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.font = new THREE.Font(TG);\n    const shapes = this.font.generateShapes('ODDAIP', 100);\n    this.geometry = new THREE.ShapeBufferGeometry(shapes);\n    this.geometry.computeBoundingBox();\n    this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n    this.yMid = -0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n    this.geometry.translate(this.xMid, this.yMid, 0); // make shape ( N.B. edge view not visible )\n\n    console.log(this.geometry);\n    this.text = new THREE.Mesh(this.geometry, this.material); // const s = this.prepareTextGeometry('ODDAIP');\n\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add(this.text);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","TG","textFragment","textVertex","SphereSlider","React","PureComponent","text","group","Group","glyphs","split","offset","i","length","shapes","font","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","yMid","y","translate","add","Mesh","material","console","log","needsUpdate","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","alpha","setSize","position","z","canvas","appendChild","domElement","color","MSDFShader","require","RawShaderMaterial","uniforms","uTime","value","vertexShader","fragmentShader","side","DoubleSide","transparent","controls","enableDamping","dampingFactor","enableZoom","Font","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    var MSDFShader = require('three-bmfont-text/shaders/msdf')\n\n    this.material = new THREE.RawShaderMaterial(MSDFShader({\n      uniforms: {\n        uTime: { value: 1.0 }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide,\n      transparent: true,\n    }))\n\n    // this.material = new THREE.RawShaderMaterial({\n    //   uniforms: {\n    //       uTime: { value: 1.0 }\n    //   },\n    //   vertexShader: textVertex,\n    //   fragmentShader: textFragment,\n    //   side: THREE.DoubleSide,\n    //   transparent: true,\n    // });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDAIP', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    this.text = new THREE.Mesh( this.geometry, this.material );\n    // const s = this.prepareTextGeometry('ODDAIP');\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add(this.text);\n    \n    this.animate();\n  }\n\n  prepareTextGeometry = (text) => {\n    const group = new THREE.Group();\n    const glyphs = text.split('');\n    let offset = 0;\n    for (let i = 0; i < glyphs.length; i++) {\n      const shapes = this.font.generateShapes( glyphs[i], 100 );\n      const geometry = new THREE.ShapeBufferGeometry( shapes );\n      geometry.computeBoundingBox();\n      const xMid = (-0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x ) + offset);\n      const yMid = - 0.5 * ( geometry.boundingBox.max.y - geometry.boundingBox.min.y );\n      offset += geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n      // console.log();\n      \n      geometry.translate( xMid, yMid, 0 );\n      group.add(new THREE.Mesh(geometry, this.material));\n    };\n    // group.computeBoundingBox();\n    console.log(group);\n    \n    return group;\n    \n  }\n\n  animate = () => {\n    this.material.needsUpdate = true;\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}