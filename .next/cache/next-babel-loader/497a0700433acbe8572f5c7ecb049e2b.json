{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport helvetica from './font.json';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"prepareTextTexture\", () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = window.innerWidth * 2;\n      canvas.height = window.innerHeight * 2;\n      const ctx = canvas.getContext('2d');\n      ctx.font = '170px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n      return canvas;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture()); // console.log(helvetica);\n    // console.log(require('./font.json'));\n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n\n    this.texture.minFilter = THREE.LinearFilter; // this.texture.anisotropy  = 1;\n\n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.color = 0x006699;\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.font = new THREE.Font(helvetica);\n    const shapes = this.font.generateShapes('khuy vam', 100);\n    this.geometry = new THREE.ShapeBufferGeometry(shapes);\n    this.geometry.computeBoundingBox();\n    this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n    this.geometry.translate(this.xMid, 0, 0); // make shape ( N.B. edge view not visible )\n\n    this.text = new THREE.Mesh(this.geometry, this.matDark);\n    this.text.position.z = 0;\n    this.scene.add(this.text); // this.loader = new THREE.FontLoader();\n    // this.loader.load(helvetica, (font) => {\n    // console.log(font);\n    // const shapes = font.generateShapes( message, 100 );\n    // console.log(shapes);\n    // });\n    // this.geometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight)\n    // this.material = new THREE.MeshBasicMaterial({\n    // color: 0xffff00,\n    //   side: THREE.DoubleSide,\n    //   map: this.texture,\n    // });\n    // this.plane = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.plane);\n\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","helvetica","SphereSlider","React","PureComponent","canvas","document","createElement","width","window","innerWidth","height","innerHeight","ctx","getContext","font","textAlign","textBaseline","fillStyle","fillText","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","texture","Texture","prepareTextTexture","minFilter","LinearFilter","needsUpdate","Scene","PerspectiveCamera","WebGLRenderer","setSize","position","z","appendChild","domElement","color","matDark","LineBasicMaterial","side","DoubleSide","matLite","MeshBasicMaterial","transparent","opacity","controls","enableDamping","dampingFactor","enableZoom","Font","shapes","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","translate","text","Mesh","add","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport helvetica from './font.json';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(helvetica);\n    // console.log(require('./font.json'));\n    \n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0x006699;\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(helvetica);\n    const shapes = this.font.generateShapes( 'khuy vam', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.geometry.translate( this.xMid, 0, 0 );\n    // make shape ( N.B. edge view not visible )\n    this.text = new THREE.Mesh( this.geometry, this.matDark );\n    this.text.position.z = 0;\n    this.scene.add( this.text );\n    \n    // this.loader = new THREE.FontLoader();\n    // this.loader.load(helvetica, (font) => {\n      // console.log(font);\n      // const shapes = font.generateShapes( message, 100 );\n      // console.log(shapes);\n      \n      \n    // });\n\n    // this.geometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight)\n    // this.material = new THREE.MeshBasicMaterial({\n      // color: 0xffff00,\n    //   side: THREE.DoubleSide,\n    //   map: this.texture,\n    // });\n    // this.plane = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.plane);\n    this.animate();\n  }\n\n  prepareTextTexture = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    const ctx = canvas.getContext('2d');\n    ctx.font = '170px serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#ffffff'\n    ctx.fillText('ODDA', canvas.width / 2, canvas.height / 2);\n    return canvas;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}