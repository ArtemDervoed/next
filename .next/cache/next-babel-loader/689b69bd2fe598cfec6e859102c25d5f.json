{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl';\nimport textVertex from '../../glsl/vertex.glsl'; // import TRYGalien from './TRYGalien.woff2';\n\nvar SphereSlider =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SphereSlider, _React$PureComponent);\n\n  function SphereSlider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SphereSlider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SphereSlider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"prepareTextGeometry\", function (text) {\n      var group = new THREE.Group();\n      var glyphs = text.split('');\n      var offset = 0;\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var shapes = _this.font.generateShapes(glyphs[i], 100);\n\n        var geometry = new THREE.ShapeBufferGeometry(shapes);\n        geometry.computeBoundingBox();\n        var xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x) + offset;\n        var yMid = -0.5 * (geometry.boundingBox.max.y - geometry.boundingBox.min.y);\n        offset += geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n        console.log(geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n        geometry.translate(xMid, yMid, 0);\n        group.add(new THREE.Mesh(geometry, _this.material));\n      }\n\n      ; // group.computeBoundingBox();\n\n      console.log(group);\n      return group;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function () {\n      _this.material.needsUpdate = true;\n      requestAnimationFrame(_this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    return _this;\n  }\n\n  _createClass(SphereSlider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.camera.position.z = 5;\n      this.canvas.appendChild(this.renderer.domElement);\n      this.color = 0xff0000;\n      this.material = new THREE.RawShaderMaterial({\n        uniforms: {\n          uTime: {\n            value: 1.0\n          }\n        },\n        vertexShader: textVertex,\n        fragmentShader: textFragment,\n        side: THREE.DoubleSide,\n        transparent: true\n      });\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true;\n      this.controls.dampingFactor = 0.25;\n      this.controls.enableZoom = true;\n      this.font = new THREE.Font(TG);\n      var shapes = this.font.generateShapes('ODDA', 100);\n      this.geometry = new THREE.ShapeBufferGeometry(shapes);\n      this.geometry.computeBoundingBox();\n      this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n      this.yMid = -0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n      this.geometry.translate(this.xMid, this.yMid, 0); // make shape ( N.B. edge view not visible )\n\n      console.log(this.geometry); // this.text = new THREE.Mesh( this.geometry, this.material );\n\n      var s = this.prepareTextGeometry('ODDAIP'); // this.text.position.z = 0;\n\n      this.camera.position.z = 200;\n      this.scene.add(s);\n      this.animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        ref: function ref(node) {\n          _this2.canvas = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SphereSlider;\n}(React.PureComponent);\n\nexport { SphereSlider as default };","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","TG","textFragment","textVertex","SphereSlider","text","group","Group","glyphs","split","offset","i","length","shapes","font","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","yMid","y","console","log","translate","add","Mesh","material","needsUpdate","requestAnimationFrame","animate","renderer","render","scene","camera","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","alpha","setSize","position","z","canvas","appendChild","domElement","color","RawShaderMaterial","uniforms","uTime","value","vertexShader","fragmentShader","side","DoubleSide","transparent","controls","enableDamping","dampingFactor","enableZoom","Font","s","prepareTextGeometry","node","React","PureComponent"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n          uTime: { value: 1.0 }\n      },\n      vertexShader: textVertex,\n      fragmentShader: textFragment,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    // this.text = new THREE.Mesh( this.geometry, this.material );\n    const s = this.prepareTextGeometry('ODDAIP');\n    // this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add(s);\n    \n    this.animate();\n  }\n\n  prepareTextGeometry = (text) => {\n    const group = new THREE.Group();\n    const glyphs = text.split('');\n    let offset = 0;\n    for (let i = 0; i < glyphs.length; i++) {\n      const shapes = this.font.generateShapes( glyphs[i], 100 );\n      const geometry = new THREE.ShapeBufferGeometry( shapes );\n      geometry.computeBoundingBox();\n      const xMid = (-0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x ) + offset);\n      const yMid = - 0.5 * ( geometry.boundingBox.max.y - geometry.boundingBox.min.y );\n      offset += geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n      console.log(geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n      \n      geometry.translate( xMid, yMid, 0 );\n      group.add(new THREE.Mesh(geometry, this.material));\n    };\n    // group.computeBoundingBox();\n    console.log(group);\n    \n    return group;\n    \n  }\n\n  animate = () => {\n    this.material.needsUpdate = true;\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}