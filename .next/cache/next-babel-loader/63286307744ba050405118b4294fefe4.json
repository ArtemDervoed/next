{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fragmentSrc from './fragment.glsl';\nimport textVertex from './vertex.glsl';\nimport { jsImageCover } from './jsImageCover';\nimport gsap from 'gsap';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleAnimateUp\", () => {\n      gsap.fromTo(this.config, {\n        offset: 0 // blend: 0,\n\n      }, {\n        offset: 1,\n        // blend: 1,\n        duration: this.config.duration,\n        ease: \"power2\"\n      });\n    });\n\n    _defineProperty(this, \"handleAnimateDown\", () => {\n      gsap.fromTo(this.config, {\n        offset: 0 // blend: 0,\n\n      }, {\n        offset: -1,\n        // blend: 1,\n        duration: this.config.duration,\n        ease: \"power2\"\n      });\n    });\n\n    _defineProperty(this, \"handleKeyDown\", e => {\n      if (e.key === 'ArrowUp') {\n        this.handleAnimateUp();\n        console.log('ArrowUp');\n      }\n\n      if (e.key === 'ArrowDown') {\n        this.handleAnimateDown();\n        console.log('ArrowDown');\n      }\n    });\n\n    _defineProperty(this, \"handleMouseMove\", e => {\n      // this.rect.containse(clientX, e.clientY);\n      this.mouse.x = e.clientX / window.innerWidth * 2 - 1;\n      this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      this.sprite.x = this.config.x;\n      this.sprite.y = this.config.y;\n      this.custumSmoothScrollFilter.uniforms.blend = this.config.blend;\n      this.custumSmoothScrollFilter.uniforms.offset = this.config.offset;\n      requestAnimationFrame(this.animate);\n    });\n  }\n\n  componentDidMount() {\n    this.mouse = {\n      x: 0,\n      y: 0\n    };\n    this.PIXI = require('pixi.js');\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.app = new this.PIXI.Application({\n      width: this.width,\n      height: this.height,\n      transparent: true,\n      autoResize: true,\n      resizeTo: window,\n      resolution: 1\n    });\n    this.config = {\n      x: this.width / 2,\n      y: this.height / 2,\n      blend: 0,\n      offset: 0,\n      duration: 2.5\n    };\n    this.container = new this.PIXI.Container();\n    this.sprite = new this.PIXI.Sprite(this.PIXI.Texture.from('/1.jpg'));\n    this.sprite.anchor.set(0.5, 0.5);\n    this.sprite.x = this.config.x;\n    this.sprite.y = this.config.y;\n    this.sprite.width = jsImageCover(this.sprite, 400, 550).width;\n    this.sprite.height = jsImageCover(this.sprite, 400, 550).height; // this.rect = new this.PIXI.Rectangle(0, 0, this.width, this.height);\n\n    this.graphics = new this.PIXI.Graphics(); // Rectangle\n\n    this.graphics.alpha = 0;\n    this.graphics.beginFill(0xDE3249);\n    this.graphics.drawRect(0, 0, this.width, this.height);\n    this.graphics.endFill();\n    this.container.addChild(this.graphics);\n    this.container.addChild(this.sprite);\n    this.custumSmoothScrollFilter = new this.PIXI.Filter(null, fragmentSrc, {\n      blend: this.config.blend\n    });\n    this.container.filters = [this.custumSmoothScrollFilter];\n    this.canvas.appendChild(this.app.view);\n    this.app.stage.addChild(this.container);\n    window.addEventListener('mousemove', this.handleMouseMove);\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.animate(); // GUI //\n\n    this.dat = require('dat.gui');\n    this.gui = new this.dat.GUI();\n    this.gui.remember(this.config);\n    this.gui.add(this.config, 'blend').min(-1).max(1).step(0.001);\n    ;\n    this.gui.add(this.config, 'offset').min(-1).max(1).step(0.001);\n    ;\n    this.gui.add(this.config, 'x').min(-this.width).max(this.width * 2).step(1);\n    this.gui.add(this.config, 'y').min(-this.height).max(this.height * 2).step(1);\n    this.gui.add(this.config, 'duration').min(0).max(10).step(0.5); // GUI //\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}