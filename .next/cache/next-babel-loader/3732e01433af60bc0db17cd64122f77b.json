{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl';\nimport textVertex from '../../glsl/vertex.glsl'; // import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture()); // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n\n    this.texture.minFilter = THREE.LinearFilter; // this.texture.anisotropy  = 1;\n\n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.color = 0xff0000; // this.material = new THREE.RawShaderMaterial({\n    //   uniforms: {\n    //       uTime: { value: 1.0 }\n    //   },\n    //   vertexShader: textVertex,\n    //   fragmentShader: textFragment,\n    // });\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.font = new THREE.Font(TG);\n    const shapes = this.font.generateShapes('ODDA', 100);\n    this.geometry = new THREE.ShapeBufferGeometry(shapes);\n    this.geometry.computeBoundingBox();\n    this.xMid = -0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\n    this.yMid = -0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n    this.geometry.translate(this.xMid, this.yMid, 0); // make shape ( N.B. edge view not visible )\n\n    console.log(this.geometry);\n    this.text = new THREE.Mesh(this.geometry, this.material);\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add(this.text);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","TG","textFragment","textVertex","SphereSlider","React","PureComponent","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","texture","Texture","prepareTextTexture","minFilter","LinearFilter","needsUpdate","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","canvas","appendChild","domElement","color","matDark","LineBasicMaterial","side","DoubleSide","matLite","MeshBasicMaterial","transparent","opacity","controls","enableDamping","dampingFactor","enableZoom","font","Font","shapes","generateShapes","geometry","ShapeBufferGeometry","computeBoundingBox","xMid","boundingBox","max","x","min","yMid","y","translate","console","log","text","Mesh","material","add","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport TG from './TG.json';\nimport textFragment from '../../glsl/fragment.glsl'\nimport textVertex from '../../glsl/vertex.glsl';\n// import TRYGalien from './TRYGalien.woff2';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.texture = new THREE.Texture(this.prepareTextTexture());\n    // console.log(TRYGalien);\n    // console.log(require(textFragment, textVertex));\n    \n    // this.texture.magFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.NearestFilter;\n    // this.texture.minFilter = THREE.LinearMipMapLinearFilter;\n    this.texture.minFilter = THREE.LinearFilter;\n    // this.texture.anisotropy  = 1;\n    \n    this.texture.needsUpdate = true;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n    this.color = 0xff0000;\n\n    // this.material = new THREE.RawShaderMaterial({\n    //   uniforms: {\n    //       uTime: { value: 1.0 }\n    //   },\n    //   vertexShader: textVertex,\n    //   fragmentShader: textFragment,\n  \n    // });\n\n    this.matDark = new THREE.LineBasicMaterial({\n      color: this.color,\n      side: THREE.DoubleSide\n    });\n    this.matLite = new THREE.MeshBasicMaterial({\n      color: this.color,\n      transparent: true,\n      opacity: 0.4,\n      side: THREE.DoubleSide\n    });\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n    this.font = new THREE.Font(TG);\n\n    const shapes = this.font.generateShapes( 'ODDA', 100 );\n    this.geometry = new THREE.ShapeBufferGeometry( shapes );\n    this.geometry.computeBoundingBox();\n    this.xMid = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\n    this.yMid = - 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );\n    this.geometry.translate( this.xMid, this.yMid, 0 );\n    // make shape ( N.B. edge view not visible )\n    console.log(this.geometry);\n    \n    this.text = new THREE.Mesh( this.geometry, this.material );\n    this.text.position.z = 0;\n    this.camera.position.z = 200;\n    this.scene.add( this.text );\n    \n    this.animate();\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}