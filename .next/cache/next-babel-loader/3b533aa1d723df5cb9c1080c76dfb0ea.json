{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"prepareText\", text => {\n      const bitmap = document.createElement('canvas');\n      const g = bitmap.getContext('2d');\n      bitmap.width = 100;\n      bitmap.height = 100;\n      g.font = 'Bold 20px Arial';\n      g.fillStyle = 'white';\n      g.textBaseline = 'middle';\n      g.textAlign = 'center';\n      g.fillText(text, 20, 20);\n      g.strokeStyle = 'black';\n      g.strokeText(text, 20, 20); // canvas contents will be used for a texture\n\n      const texture = new THREE.Texture(bitmap);\n      texture.needsUpdate = true;\n      return texture;\n    });\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.25;\n    this.controls.enableZoom = true;\n    this.texture = this.prepareText('Awesome');\n    this.geometry = new THREE.PlaneGeometry(5, 20, 32);\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture\n    });\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","SphereSlider","React","PureComponent","text","bitmap","document","createElement","g","getContext","width","height","font","fillStyle","textBaseline","textAlign","fillText","strokeStyle","strokeText","texture","Texture","needsUpdate","requestAnimationFrame","animate","renderer","render","scene","camera","componentDidMount","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","canvas","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","prepareText","geometry","PlaneGeometry","material","MeshBasicMaterial","color","side","DoubleSide","map","plane","Mesh","add","node"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n\n    this.texture = this.prepareText('Awesome');\n    this.geometry = new THREE.PlaneGeometry( 5, 20, 32 );\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  prepareText = (text) => {\n    const bitmap = document.createElement('canvas');\n    const g = bitmap.getContext('2d');\n    bitmap.width = 100;\n    bitmap.height = 100;\n    g.font = 'Bold 20px Arial';\n\n    g.fillStyle = 'white';\n    g.textBaseline = 'middle';\n    g.textAlign = 'center';\n    g.fillText(text, 20, 20);\n    g.strokeStyle = 'black';\n    g.strokeText(text, 20, 20);\n\n    // canvas contents will be used for a texture\n    const texture = new THREE.Texture(bitmap) \n    texture.needsUpdate = true;\n\n    return texture;\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}