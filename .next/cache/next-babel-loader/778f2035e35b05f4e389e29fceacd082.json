{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nvar SphereSlider =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SphereSlider, _React$PureComponent);\n\n  function SphereSlider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SphereSlider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SphereSlider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function () {\n      requestAnimationFrame(_this.animate); // this.cube.rotation.x += 0.01;\n      // this.cube.rotation.y += 0.01;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    return _this;\n  }\n\n  _createClass(SphereSlider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight); // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      // this.cube = new THREE.Mesh( this.geometry, this.material );\n      // this.scene.add(this.cube);\n\n      this.camera.position.z = 5;\n      this.canvas.appendChild(this.renderer.domElement);\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true;\n      this.controls.dampingFactor = 0.25;\n      this.controls.enableZoom = true;\n      this.loader = new THREE.FontLoader();\n      this.loader.load('fonts/helvetiker_regular.typeface.json', function (font) {\n        console.log(font);\n      });\n      this.material = new THREE.MeshBasicMaterial({\n        color: 0xffff00,\n        side: THREE.DoubleSide,\n        map: this.texture\n      });\n      this.plane = new THREE.Mesh(this.geometry, this.material);\n      this.scene.add(this.plane);\n      this.animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        ref: function ref(node) {\n          _this2.canvas = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SphereSlider;\n}(React.PureComponent);\n\nexport { SphereSlider as default };","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","OrbitControls","SphereSlider","requestAnimationFrame","animate","renderer","render","scene","camera","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","position","z","canvas","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","loader","FontLoader","load","font","console","log","material","MeshBasicMaterial","color","side","DoubleSide","map","texture","plane","Mesh","geometry","add","node","React","PureComponent"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;IAEqBC,Y;;;;;;;;;;;;;;;;;;8DAsCT,YAAM;AACdC,MAAAA,qBAAqB,CAAE,MAAKC,OAAP,CAArB,CADc,CAEd;AACF;;AACE,YAAKC,QAAL,CAAcC,MAAd,CAAsB,MAAKC,KAA3B,EAAkC,MAAKC,MAAvC;AACD,K;;;;;;;wCA1CmB;AAClB,WAAKD,KAAL,GAAa,IAAIP,KAAK,CAACS,KAAV,EAAb;AACA,WAAKD,MAAL,GAAc,IAAIR,KAAK,CAACU,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAd;AAEA,WAAKR,QAAL,GAAgB,IAAIL,KAAK,CAACc,aAAV,EAAhB;AACA,WAAKT,QAAL,CAAcU,OAAd,CAAuBJ,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACE,WAAjD,EALkB,CAOlB;AACA;AACA;AACA;;AAEA,WAAKL,MAAL,CAAYQ,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB;AAEA,WAAKC,MAAL,CAAYC,WAAZ,CAAyB,KAAKd,QAAL,CAAce,UAAvC;AAGA,WAAKC,QAAL,GAAgB,IAAIpB,aAAJ,CAAkB,KAAKO,MAAvB,EAA+B,KAAKH,QAAL,CAAce,UAA7C,CAAhB;AACA,WAAKC,QAAL,CAAcC,aAAd,GAA8B,IAA9B;AACA,WAAKD,QAAL,CAAcE,aAAd,GAA8B,IAA9B;AACA,WAAKF,QAAL,CAAcG,UAAd,GAA2B,IAA3B;AAEA,WAAKC,MAAL,GAAc,IAAIzB,KAAK,CAAC0B,UAAV,EAAd;AACA,WAAKD,MAAL,CAAYE,IAAZ,CAAiB,wCAAjB,EAA2D,UAACC,IAAD,EAAU;AACnEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAED,OAHD;AAIA,WAAKG,QAAL,GAAgB,IAAI/B,KAAK,CAACgC,iBAAV,CAA4B;AAC1CC,QAAAA,KAAK,EAAE,QADmC;AAE1CC,QAAAA,IAAI,EAAElC,KAAK,CAACmC,UAF8B;AAG1CC,QAAAA,GAAG,EAAE,KAAKC;AAHgC,OAA5B,CAAhB;AAKA,WAAKC,KAAL,GAAa,IAAItC,KAAK,CAACuC,IAAV,CAAgB,KAAKC,QAArB,EAA+B,KAAKT,QAApC,CAAb;AACA,WAAKxB,KAAL,CAAWkC,GAAX,CAAe,KAAKH,KAApB;AACA,WAAKlC,OAAL;AACD;;;6BASQ;AAAA;;AACP,aACE;AAAK,QAAA,GAAG,EAAE,aAACsC,IAAD,EAAU;AAAE,UAAA,MAAI,CAACxB,MAAL,GAAcwB,IAAd;AAAmB,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAjDuCC,KAAK,CAACC,a;;SAA3B1C,Y","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n  \n    // this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    // this.cube = new THREE.Mesh( this.geometry, this.material );\n    // this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n    this.controls.enableDamping = true\n    this.controls.dampingFactor = 0.25\n    this.controls.enableZoom = true\n\n    this.loader = new THREE.FontLoader();\n    this.loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\n      console.log(font);\n      \n    });\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide,\n      map: this.texture,\n    });\n    this.plane = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.plane);\n    this.animate();\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    // this.cube.rotation.x += 0.01;\n\t\t// this.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}