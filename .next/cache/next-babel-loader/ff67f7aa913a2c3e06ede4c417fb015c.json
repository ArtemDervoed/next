{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport * as PIXI from 'pixi.js';\nimport { Expo, TweenMax } from 'gsap';\nexport default class Mask extends PIXI.Graphics {\n  constructor(element, params) {\n    super();\n\n    _defineProperty(this, \"setAngle\", newAngle => {\n      this.rotationAngle += newAngle; // * (180 / Math.PI);\n    });\n\n    _defineProperty(this, \"setSize\", (widthNew, heightNew) => {\n      this.params.width = widthNew;\n      this.params.height = heightNew;\n    });\n\n    _defineProperty(this, \"setPosition\", (x, y) => {\n      this.params.x = x;\n      this.params.y = y;\n    });\n\n    _defineProperty(this, \"calcRotation\", (x, y, angle) => {\n      const cos = Math.cos(angle);\n      const sin = Math.sin(angle);\n      const nx = x * cos - y * sin;\n      const ny = y * cos + x * sin;\n      return {\n        x: nx,\n        y: ny\n      };\n    });\n\n    _defineProperty(this, \"renderMask\", () => {\n      const {\n        x,\n        y,\n        width,\n        height,\n        anchorX,\n        anchorY\n      } = this.params; // eslint-disable-line\n\n      const nx = x - width * anchorX;\n      const ny = y - height * anchorY;\n      this.clear();\n      this.beginFill(0xff0000);\n      const v0 = this.calcRotation(nx, ny, this.rotationAngle);\n      this.moveTo(v0.x, v0.y);\n      const v1 = this.calcRotation(nx + width, ny, this.rotationAngle);\n      this.lineTo(v1.x, v1.y);\n      const v2 = this.calcRotation(nx + width, ny + height, this.rotationAngle);\n      this.lineTo(v2.x, v2.y);\n      const v3 = this.calcRotation(nx, ny + height, this.rotationAngle);\n      this.lineTo(v3.x, v3.y, this.rotationAngle);\n      this.lineTo(v0.x, v0.y);\n      this.endFill();\n      this.lineStyle(0);\n    });\n\n    _defineProperty(this, \"setSizeMaskWithAnimation\", (newWidth, newHeight, duration) => {\n      TweenMax.to(this.params, duration, {\n        width: newWidth,\n        height: newHeight,\n        ease: Expo.easeInOut,\n        onUpdate: this.animateMask\n      });\n    });\n\n    _defineProperty(this, \"animateMask\", () => {\n      this.renderMask();\n    });\n\n    _defineProperty(this, \"removeMask\", () => {\n      this.elm.mask = null;\n    });\n\n    this.elm = element;\n    this.params = params;\n    this.rotationAngle = 0; // this.elm.mask = this;\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/Mask.js"],"names":["PIXI","Expo","TweenMax","Mask","Graphics","constructor","element","params","newAngle","rotationAngle","widthNew","heightNew","width","height","x","y","angle","cos","Math","sin","nx","ny","anchorX","anchorY","clear","beginFill","v0","calcRotation","moveTo","v1","lineTo","v2","v3","endFill","lineStyle","newWidth","newHeight","duration","to","ease","easeInOut","onUpdate","animateMask","renderMask","elm","mask"],"mappings":"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","sourcesContent":["import * as PIXI from 'pixi.js';\nimport { Expo, TweenMax } from 'gsap';\n\nexport default class Mask extends PIXI.Graphics {\n  constructor(element, params) {\n    super();\n    this.elm = element;\n    this.params = params;\n    this.rotationAngle = 0;\n    // this.elm.mask = this;\n  }\n\n  setAngle = (newAngle) => {\n    this.rotationAngle += newAngle; // * (180 / Math.PI);\n  }\n\n  setSize = (widthNew, heightNew) => {\n    this.params.width = widthNew;\n    this.params.height = heightNew;\n  };\n\n  setPosition = (x, y) => {\n    this.params.x = x;\n    this.params.y = y;\n  };\n\n  calcRotation = (x, y, angle) => {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle)\n    const nx = x * cos - y * sin;\n    const ny = y * cos + x * sin;\n    return { x: nx, y: ny };\n  }\n\n  renderMask = () => {\n    const { x, y, width, height, anchorX, anchorY } = this.params; // eslint-disable-line\n    const nx = x - (width * anchorX);\n    const ny = y - (height * anchorY)\n    this.clear();\n    this.beginFill(0xff0000);\n    const v0 = this.calcRotation(\n      nx,\n      ny,\n      this.rotationAngle,\n    );\n    this.moveTo(\n      v0.x,\n      v0.y\n    );\n    const v1 = this.calcRotation(\n      nx + width,\n      ny,\n      this.rotationAngle,\n    );\n    this.lineTo(\n      v1.x,\n      v1.y,\n    );\n\n    const v2 = this.calcRotation(\n      nx + width,\n      ny + height,\n      this.rotationAngle,\n    );\n\n    this.lineTo(\n      v2.x,\n      v2.y,\n    );\n\n    const v3 = this.calcRotation(\n      nx,\n      ny + height,\n      this.rotationAngle,\n    );\n\n    this.lineTo(\n      v3.x,\n      v3.y,\n      this.rotationAngle,\n    );\n\n    this.lineTo(\n      v0.x,\n      v0.y,\n    );\n\n    this.endFill();\n    this.lineStyle(0);\n  };\n\n  setSizeMaskWithAnimation = (newWidth, newHeight, duration) => {\n    TweenMax.to(\n      this.params,\n      duration,\n      {\n        width: newWidth,\n        height: newHeight,\n        ease: Expo.easeInOut,\n        onUpdate: this.animateMask,\n      }\n    );\n  };\n\n  animateMask = () => {\n    this.renderMask();\n  };\n\n  removeMask = () => {\n    this.elm.mask = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}