{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/msi/hello-next/components/SphereSlider/SphereSlider.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nexport default class SphereSlider extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"animate\", () => {\n      requestAnimationFrame(this.animate);\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  componentDidMount() {\n    console.log(THREE);\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.geometry = new THREE.BoxGeometry(1, 1, 1);\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    this.cube = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.cube);\n    this.camera.position.z = 5;\n    this.canvas.appendChild(this.renderer.domElement);\n    this.animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: node => {\n        this.canvas = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/msi/hello-next/components/SphereSlider/SphereSlider.js"],"names":["THREE","SphereSlider","React","PureComponent","requestAnimationFrame","animate","cube","rotation","x","y","renderer","render","scene","camera","componentDidMount","console","log","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","position","z","canvas","appendChild","domElement","node"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,MAAMC,YAAN,SAA2BC,KAAK,CAACC,aAAjC,CAA+C;AAAA;AAAA;;AAAA,qCAoBlD,MAAM;AACdC,MAAAA,qBAAqB,CAAE,KAAKC,OAAP,CAArB;AACA,WAAKC,IAAL,CAAUC,QAAV,CAAmBC,CAAnB,IAAwB,IAAxB;AACF,WAAKF,IAAL,CAAUC,QAAV,CAAmBE,CAAnB,IAAwB,IAAxB;AACE,WAAKC,QAAL,CAAcC,MAAd,CAAsB,KAAKC,KAA3B,EAAkC,KAAKC,MAAvC;AACD,KAzB2D;AAAA;;AAC5DC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACA,SAAKY,KAAL,GAAa,IAAIZ,KAAK,CAACiB,KAAV,EAAb;AACA,SAAKJ,MAAL,GAAc,IAAIb,KAAK,CAACkB,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAd;AAEA,SAAKX,QAAL,GAAgB,IAAIV,KAAK,CAACsB,aAAV,EAAhB;AACA,SAAKZ,QAAL,CAAca,OAAd,CAAuBJ,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACE,WAAjD;AAEA,SAAKG,QAAL,GAAgB,IAAIxB,KAAK,CAACyB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAhB;AACA,SAAKC,QAAL,GAAgB,IAAI1B,KAAK,CAAC2B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAhB;AACA,SAAKtB,IAAL,GAAY,IAAIN,KAAK,CAAC6B,IAAV,CAAgB,KAAKL,QAArB,EAA+B,KAAKE,QAApC,CAAZ;AACA,SAAKd,KAAL,CAAWkB,GAAX,CAAe,KAAKxB,IAApB;AAEA,SAAKO,MAAL,CAAYkB,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB;AAEA,SAAKC,MAAL,CAAYC,WAAZ,CAAyB,KAAKxB,QAAL,CAAcyB,UAAvC;AACA,SAAK9B,OAAL;AACD;;AASDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,GAAG,EAAGyB,IAAD,IAAU;AAAE,aAAKH,MAAL,GAAcG,IAAd;AAAmB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA/B2D","sourcesContent":["import * as THREE from 'three';\n\nexport default class SphereSlider extends React.PureComponent {\n  componentDidMount() {\n    console.log(THREE);\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n    this.geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    this.material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    this.cube = new THREE.Mesh( this.geometry, this.material );\n    this.scene.add(this.cube);\n\n    this.camera.position.z = 5;\n\n    this.canvas.appendChild( this.renderer.domElement );\n    this.animate();\n  }\n\n  animate = () => {\n    requestAnimationFrame( this.animate );\n    this.cube.rotation.x += 0.01;\n\t\tthis.cube.rotation.y += 0.01;\n    this.renderer.render( this.scene, this.camera );\n  }\n  \n  render() {\n    return (\n      <div ref={(node) => { this.canvas = node}} />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}